import { Diagram } from "mermaid/dist/Diagram.js";
import { ExcalidrawLinearElement } from "@excalidraw/excalidraw/types/element/types.js";
export type Line = {
    id?: string;
    startX: number;
    startY: number;
    endX: number;
    endY: number;
    strokeColor: string | null;
    strokeWidth: number | null;
    strokeStyle: ExcalidrawLinearElement["strokeStyle"] | null;
    type: "line";
    groupId?: string;
};
type ARROW_KEYS = keyof typeof SEQUENCE_ARROW_TYPES;
export type Arrow = Omit<Line, "type" | "strokeStyle"> & {
    type: "arrow";
    label?: {
        text: string | null;
        fontSize: number;
    };
    strokeStyle: (typeof SEQUENCE_ARROW_TYPES)[ARROW_KEYS];
    points?: number[][];
    sequenceNumber: Container;
};
export type Text = {
    id?: string;
    type: "text";
    text: string;
    x: number;
    y: number;
    width: number;
    height: number;
    fontSize: number;
    groupId?: string;
};
export type Container = {
    id?: string;
    type: "rectangle" | "ellipse";
    label?: {
        text: string | null;
        fontSize: number;
        color?: string;
    };
    x: number;
    y: number;
    width?: number;
    height?: number;
    strokeStyle?: "dashed" | "solid";
    strokeWidth?: number;
    strokeColor?: string;
    bgColor?: string;
    subtype?: "actor" | "activation" | "highlight" | "note" | "sequence";
    groupId?: string;
};
export type Node = Container | Line | Arrow | Text;
type Loop = {
    lines: Line[];
    texts: Text[];
    nodes: Container[];
};
type Group = {
    name: string;
    actorKeys: Array<string>;
    fill: string;
};
export interface Sequence {
    type: "sequence";
    nodes: Array<Node[]>;
    lines: Line[];
    arrows: Arrow[];
    loops: Loop | undefined;
    groups: Group[];
}
declare const SEQUENCE_ARROW_TYPES: {
    0: string;
    1: string;
    3: string;
    4: string;
    5: string;
    6: string;
    24: string;
    25: string;
};
export declare const parseMermaidSequenceDiagram: (diagram: Diagram, containerEl: Element) => Sequence;
export {};
