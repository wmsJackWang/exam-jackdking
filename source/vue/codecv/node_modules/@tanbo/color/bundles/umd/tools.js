(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./color", "./utils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.any2Hsl = exports.getColorEncoding = exports.rotateHue = exports.random = exports.decimal2Hex = exports.hex2Decimal = exports.parseCss = void 0;
    var color_1 = require("./color");
    var utils_1 = require("./utils");
    function parseCss(css) {
        if (css.indexOf('#') > -1) {
            return (0, color_1.hex2Rgb)(css);
        }
        var prefix = css.split('(')[0];
        var args = css.split('(')[1].split(')')[0].split(',');
        return prefix.split('').reduce(function (color, param, idx) {
            var nextColor = color;
            nextColor[param] = parseFloat(args[idx]);
            return nextColor;
        }, {});
    }
    exports.parseCss = parseCss;
    function hex2Decimal(hexColor) {
        return parseInt((0, utils_1.normalizeHex)(hexColor).replace('#', ''), 16);
    }
    exports.hex2Decimal = hex2Decimal;
    function decimal2Hex(decimalColor) {
        return "#" + decimalColor.toString(16);
    }
    exports.decimal2Hex = decimal2Hex;
    function random() {
        var base = '000000';
        var number = Math.floor(Math.random() * 16777215).toString(16);
        return '#' + (base + number).substr(-6);
    }
    exports.random = random;
    function rotateHue(hue, amount) {
        if (amount === void 0) { amount = 0; }
        var aux = (hue + amount) % 360;
        return aux < 0 ? (360 + aux) : aux;
    }
    exports.rotateHue = rotateHue;
    function getColorEncoding(color) {
        if (typeof color === 'string') {
            try {
                (0, color_1.hex2Rgb)(color);
                return 'hex';
            }
            catch (err) { /* Silent catch */
            }
        }
        if (typeof color !== 'object') {
            return 'unknown';
        }
        var c = color;
        if ((c.r + c.g + c.b) && typeof (c.r + c.g + c.b) === 'number') {
            return 'rgb';
        }
        if ((c.h + c.s + c.v) && typeof (c.h + c.s + c.v) === 'number') {
            return 'hsv';
        }
        if ((c.h + c.s + c.l) && typeof (c.h + c.s + c.l) === 'number') {
            return 'hsl';
        }
        if ((c.c + c.m + c.y + c.k) && typeof (c.c + c.m + c.y + c.k) === 'number') {
            return 'cmyk';
        }
        return 'unknown';
    }
    exports.getColorEncoding = getColorEncoding;
    function any2Hsl(color) {
        var colorEncoding = getColorEncoding(color);
        switch (colorEncoding) {
            case 'hsl':
                return color;
            case 'rgb':
                return (0, color_1.rgb2Hsl)(color);
            case 'hex':
                return (0, color_1.hex2Hsl)(color);
            case 'hsv':
                return (0, color_1.hsv2Hsl)(color);
            case 'cmyk':
                return (0, color_1.rgb2Hsl)((0, color_1.cmyk2Rgb)(color));
            default:
                return 'unknown';
        }
    }
    exports.any2Hsl = any2Hsl;
});
//# sourceMappingURL=tools.js.map