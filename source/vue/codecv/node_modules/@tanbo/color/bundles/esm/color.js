import { normalizeAngle, normalizeHex } from './utils';
var RGB_MAX = 255;
var HUE_MAX = 360;
var SV_MAX = 100;
export function rgb2Hsl(color) {
    var r = color.r, g = color.g, b = color.b;
    r = (r === RGB_MAX) ? 1 : (r % RGB_MAX / RGB_MAX);
    g = (g === RGB_MAX) ? 1 : (g % RGB_MAX / RGB_MAX);
    b = (b === RGB_MAX) ? 1 : (b % RGB_MAX / RGB_MAX);
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;
    if (max === min) {
        h = s = 0;
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return {
        h: Math.round(h * HUE_MAX),
        s: Math.round(s * SV_MAX),
        l: Math.round(l * SV_MAX)
    };
}
export function rgb2Hsv(color) {
    var r = color.r, g = color.g, b = color.b;
    r = (r === RGB_MAX) ? 1 : (r % RGB_MAX / RGB_MAX);
    g = (g === RGB_MAX) ? 1 : (g % RGB_MAX / RGB_MAX);
    b = (b === RGB_MAX) ? 1 : (b % RGB_MAX / RGB_MAX);
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h, s, v = max;
    var d = max - min;
    s = max === 0 ? 0 : d / max;
    if (max === min) {
        h = 0;
    }
    else {
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return {
        h: Math.round(h * HUE_MAX),
        s: Math.round(s * SV_MAX),
        v: Math.round(v * SV_MAX)
    };
}
export function hsl2Rgb(color) {
    var h = color.h, s = color.s, l = color.l;
    function _hue2Rgb(p, q, t) {
        if (t < 0)
            t += 1;
        if (t > 1)
            t -= 1;
        if (t < 1 / 6) {
            return p + (q - p) * 6 * t;
        }
        if (t < 1 / 2) {
            return q;
        }
        if (t < 2 / 3) {
            return p + (q - p) * (2 / 3 - t) * 6;
        }
        return p;
    }
    var r, g, b;
    h = normalizeAngle(h);
    h = (h === HUE_MAX) ? 1 : (h % HUE_MAX / HUE_MAX);
    s = (s === SV_MAX) ? 1 : (s % SV_MAX / SV_MAX);
    l = (l === SV_MAX) ? 1 : (l % SV_MAX / SV_MAX);
    if (s === 0) {
        r = g = b = l;
    }
    else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = _hue2Rgb(p, q, h + 1 / 3);
        g = _hue2Rgb(p, q, h);
        b = _hue2Rgb(p, q, h - 1 / 3);
    }
    return {
        r: Math.round(r * RGB_MAX),
        g: Math.round(g * RGB_MAX),
        b: Math.round(b * RGB_MAX),
    };
}
export function hsv2Rgb(color) {
    var h = color.h, s = color.s, v = color.v;
    h = normalizeAngle(h);
    h = (h === HUE_MAX) ? 1 : (h % HUE_MAX / HUE_MAX * 6);
    s = (s === SV_MAX) ? 1 : (s % SV_MAX / SV_MAX);
    v = (v === SV_MAX) ? 1 : (v % SV_MAX / SV_MAX);
    var i = Math.floor(h);
    var f = h - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t = v * (1 - (1 - f) * s);
    var mod = i % 6;
    var r = [v, q, p, p, t, v][mod];
    var g = [t, v, v, q, p, p][mod];
    var b = [p, p, t, v, v, q][mod];
    return {
        r: Math.floor(r * RGB_MAX),
        g: Math.floor(g * RGB_MAX),
        b: Math.floor(b * RGB_MAX),
    };
}
export function rgb2Hex(color) {
    var r = color.r, g = color.g, b = color.b;
    var rr = Math.round(r).toString(16);
    var gg = Math.round(g).toString(16);
    var bb = Math.round(b).toString(16);
    rr = rr.length === 1 ? '0' + rr : rr;
    gg = gg.length === 1 ? '0' + gg : gg;
    bb = bb.length === 1 ? '0' + bb : bb;
    return '#' + rr + gg + bb;
}
export function hex2Rgb(color) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(normalizeHex(color));
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
}
export function hsv2Hex(color) {
    var rgb = hsv2Rgb(color);
    return rgb2Hex(rgb);
}
export function hex2Hsv(color) {
    var rgb = hex2Rgb(normalizeHex(color));
    return rgb2Hsv(rgb);
}
export function hsl2Hex(color) {
    var rgb = hsl2Rgb(color);
    return rgb2Hex(rgb);
}
export function hex2Hsl(color) {
    var rgb = hex2Rgb(normalizeHex(color));
    return rgb2Hsl(rgb);
}
export function rgb2Cmyk(color) {
    var r = color.r, g = color.g, b = color.b;
    var rprim = r / 255;
    var gprim = g / 255;
    var bprim = b / 255;
    var k = 1 - Math.max(rprim, gprim, bprim);
    var c = (1 - rprim - k) / (1 - k);
    var m = (1 - gprim - k) / (1 - k);
    var y = (1 - bprim - k) / (1 - k);
    return {
        c: +c.toFixed(3),
        m: +m.toFixed(3),
        y: +y.toFixed(3),
        k: +k.toFixed(3)
    };
}
export function cmyk2Rgb(_a) {
    var c = _a.c, m = _a.m, y = _a.y, k = _a.k;
    var r = 255 * (1 - c) * (1 - k);
    var g = 255 * (1 - m) * (1 - k);
    var b = 255 * (1 - y) * (1 - k);
    return {
        r: Math.floor(r),
        g: Math.floor(g),
        b: Math.floor(b)
    };
}
export function hsv2Hsl(color) {
    return rgb2Hsl(hsv2Rgb(color));
}
export function hsl2Hsv(color) {
    var rgb = hsl2Rgb(color);
    return rgb2Hsv(rgb);
}
//# sourceMappingURL=color.js.map