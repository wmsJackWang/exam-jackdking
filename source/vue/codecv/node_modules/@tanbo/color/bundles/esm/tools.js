import { cmyk2Rgb, hex2Hsl, hex2Rgb, hsv2Hsl, rgb2Hsl } from './color';
import { normalizeHex } from './utils';
export function parseCss(css) {
    if (css.indexOf('#') > -1) {
        return hex2Rgb(css);
    }
    var prefix = css.split('(')[0];
    var args = css.split('(')[1].split(')')[0].split(',');
    return prefix.split('').reduce(function (color, param, idx) {
        var nextColor = color;
        nextColor[param] = parseFloat(args[idx]);
        return nextColor;
    }, {});
}
export function hex2Decimal(hexColor) {
    return parseInt(normalizeHex(hexColor).replace('#', ''), 16);
}
export function decimal2Hex(decimalColor) {
    return "#" + decimalColor.toString(16);
}
export function random() {
    var base = '000000';
    var number = Math.floor(Math.random() * 16777215).toString(16);
    return '#' + (base + number).substr(-6);
}
export function rotateHue(hue, amount) {
    if (amount === void 0) { amount = 0; }
    var aux = (hue + amount) % 360;
    return aux < 0 ? (360 + aux) : aux;
}
export function getColorEncoding(color) {
    if (typeof color === 'string') {
        try {
            hex2Rgb(color);
            return 'hex';
        }
        catch (err) { /* Silent catch */
        }
    }
    if (typeof color !== 'object') {
        return 'unknown';
    }
    var c = color;
    if ((c.r + c.g + c.b) && typeof (c.r + c.g + c.b) === 'number') {
        return 'rgb';
    }
    if ((c.h + c.s + c.v) && typeof (c.h + c.s + c.v) === 'number') {
        return 'hsv';
    }
    if ((c.h + c.s + c.l) && typeof (c.h + c.s + c.l) === 'number') {
        return 'hsl';
    }
    if ((c.c + c.m + c.y + c.k) && typeof (c.c + c.m + c.y + c.k) === 'number') {
        return 'cmyk';
    }
    return 'unknown';
}
export function any2Hsl(color) {
    var colorEncoding = getColorEncoding(color);
    switch (colorEncoding) {
        case 'hsl':
            return color;
        case 'rgb':
            return rgb2Hsl(color);
        case 'hex':
            return hex2Hsl(color);
        case 'hsv':
            return hsv2Hsl(color);
        case 'cmyk':
            return rgb2Hsl(cmyk2Rgb(color));
        default:
            return 'unknown';
    }
}
//# sourceMappingURL=tools.js.map