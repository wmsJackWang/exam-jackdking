var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Bezier } from './bezier';
var CubicBezier = /** @class */ (function (_super) {
    __extends(CubicBezier, _super);
    function CubicBezier(x1, y1, x2, y2) {
        var _this = _super.call(this, [
            0, 0,
            CubicBezier.guard0To1(x1), y1,
            CubicBezier.guard0To1(x2), y2,
            1, 1
        ]) || this;
        _this.precision = 0.000001;
        return _this;
    }
    CubicBezier.prototype.update = function (t, fn) {
        var offset = this.newton(t);
        return _super.prototype.update.call(this, offset, fn);
    };
    CubicBezier.prototype.newton = function (s) {
        var t = s;
        var max = 1;
        // 牛顿法求解，根据当前的 t，求在曲线中的 y 点
        while (true) {
            var point = _super.prototype.update.call(this, s);
            var xDistance = point.x - t;
            if (Math.abs(xDistance) < this.precision) {
                return s;
            }
            var next = void 0;
            if (xDistance < 0) {
                next = (s + max) / 2;
            }
            else {
                next = s / 2;
                max = s;
            }
            s = next;
        }
    };
    CubicBezier.guard0To1 = function (n) {
        if (n < 0) {
            return 0;
        }
        else if (n > 1) {
            return 1;
        }
        return n;
    };
    return CubicBezier;
}(Bezier));
export { CubicBezier };
//# sourceMappingURL=cubic-bezier.js.map