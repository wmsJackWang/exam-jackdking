import { any2Hsl, parseCss, normalizeHex, hex2Hsl, hex2Rgb, hex2Hsv, hsl2Hex, hsl2Hsv, hsl2Rgb, rgb2Hsl, rgb2Hex, rgb2Hsv, hsv2Hex, hsv2Hsl, hsv2Rgb } from '@tanbo/color';
import { Subject } from '@tanbo/stream';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function template(btnText, paletteText, recentText, backText) {
    return "\n<div class=\"tanbo-color-picker-preset\">\n  <div class=\"tanbo-color-picker-swatches\" style=\"height: 50px\"></div>\n  <div class=\"tanbo-color-picker-swatches\" style=\"height: 118px;\"></div>\n  <div class=\"tanbo-color-picker-recent-text\">".concat(recentText, "</div>\n  <div class=\"tanbo-color-picker-swatches\" style=\"height: 25px;\">\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n  <div class=\"tanbo-color-picker-flex\">\n    <div class=\"tanbo-color-picker-swatches\">\n      <div data-color=\"\"></div>\n    </div>\n    <button type=\"button\" class=\"tanbo-color-picker-to-palette\">").concat(paletteText, "<svg style=\"vertical-align: middle;fill: currentColor;overflow: hidden;\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><path transform=\"rotate(180, 512, 512)\" d=\"M497.92 165.12L422.4 89.6 0 512l422.4 422.4 75.52-75.52L151.04 512z\"></path></svg>\n    </button>\n  </div>\n</div>\n<div class=\"tanbo-color-picker-menu\">\n  <div class=\"tanbo-color-picker-back-btn-wrap\">\n    <button type=\"button\" class=\"tanbo-color-picker-back-btn\">\n      <svg style=\"vertical-align: middle;fill: currentColor;overflow: hidden;\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M497.92 165.12L422.4 89.6 0 512l422.4 422.4 75.52-75.52L151.04 512z\"></path></svg>").concat(backText, "\n    </button>\n  </div>\n  <div class=\"tanbo-color-picker-viewer\">\n    <div class=\"tanbo-color-picker-viewer-left\">\n      <div class=\"tanbo-color-picker-palette\">\n        <div class=\"tanbo-color-picker-palette-point\"></div>\n      </div>\n      <div class=\"tanbo-color-picker-viewer-alpha\">\n        <div class=\"tanbo-color-picker-viewer-alpha-pointer\"></div>\n        <div class=\"tanbo-color-picker-viewer-alpha-bar\"></div>\n      </div>\n    </div>\n    <div class=\"tanbo-color-picker-viewer-right\">\n      <div class=\"tanbo-color-picker-tools\">\n        <div class=\"tanbo-color-picker-value\">\n          <div class=\"tanbo-color-picker-value-color\"></div>\n        </div>\n        <div class=\"tanbo-color-picker-hue-bar\">\n          <div class=\"tanbo-color-picker-hue-pointer\"></div>\n        </div>\n      </div>\n      <div class=\"tanbo-color-picker-viewer-alpha-value\">\n        1\n      </div>\n    </div>\n  </div>\n  <div class=\"tanbo-color-picker-inputs\">\n    <div class=\"tanbo-color-picker-hsl\">\n      <div>H <input data-model=\"H\" min=\"0\" max=\"360\" type=\"number\"></div>\n      <div>S <input data-model=\"S\" min=\"0\" max=\"100\" type=\"number\"></div>\n      <div>L <input data-model=\"L\" min=\"0\" max=\"100\" type=\"number\"></div>\n    </div>\n    <div class=\"tanbo-color-picker-rgb\">\n      <div>R <input data-model=\"R\" min=\"0\" max=\"255\" type=\"number\"></div>\n      <div>G <input data-model=\"G\" min=\"0\" max=\"255\" type=\"number\"></div>\n      <div>B <input data-model=\"B\" min=\"0\" max=\"255\" type=\"number\"></div>\n    </div>\n    <div class=\"tanbo-color-picker-hex\">\n      <div>HEX <input data-model=\"HEX\" type=\"text\"></div>\n    </div>\n  </div>\n  <div class=\"tanbo-color-picker-btn-wrap\">\n    <button type=\"button\" class=\"tanbo-color-picker-btn\">").concat(btnText, "</button>\n  </div>\n</div>\n");
}

var Picker = /** @class */ (function () {
    function Picker(selector, options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.onChange = new Subject();
        this.onSelected = new Subject();
        this.host = document.createElement('div');
        this.empty = false;
        this.resetAlpha = true;
        this.recentColorOptions = [];
        this.writing = false;
        this.colorElements = [];
        if (typeof selector === 'string') {
            this.container = document.querySelector(selector);
        }
        else {
            this.container = selector;
        }
        this.host.classList.add('tanbo-color-picker');
        this.host.innerHTML = template(options.btnText || '确定', options.paletteText || '调色盘', options.recentText || '最近使用', options.backText || '返回');
        this.container.appendChild(this.host);
        this.valueViewer = this.host.querySelector('.tanbo-color-picker-value-color');
        this.palette = this.host.querySelector('.tanbo-color-picker-palette');
        this.palettePoint = this.host.querySelector('.tanbo-color-picker-palette-point');
        this.hueBar = this.host.querySelector('.tanbo-color-picker-hue-bar');
        this.huePoint = this.host.querySelector('.tanbo-color-picker-hue-pointer');
        this.checkBtn = this.host.querySelector('.tanbo-color-picker-btn');
        this.alphaBar = this.host.querySelector('.tanbo-color-picker-viewer-alpha-bar');
        this.alphaValue = this.host.querySelector('.tanbo-color-picker-viewer-alpha-value');
        this.alphaPoint = this.host.querySelector('.tanbo-color-picker-viewer-alpha-pointer');
        this.inputsWrap = this.host.querySelector('.tanbo-color-picker-inputs');
        this.hslInputs = Array.from(this.host.querySelectorAll('.tanbo-color-picker-hsl input'));
        this.rgbInputs = Array.from(this.host.querySelectorAll('.tanbo-color-picker-rgb input'));
        this.hexInput = this.host.querySelector('.tanbo-color-picker-hex input');
        this.colorWrapper = this.host.querySelector('.tanbo-color-picker-preset');
        this.switchBtn = this.host.querySelector('.tanbo-color-picker-to-palette');
        this.menu = this.host.querySelector('.tanbo-color-picker-menu');
        this.backBtn = this.host.querySelector('.tanbo-color-picker-back-btn');
        this.mainColors = this.colorWrapper.children[0];
        this.colors = this.colorWrapper.children[1];
        this.recentElement = this.colorWrapper.children[3];
        if (Array.isArray(options.mainColors)) {
            this.addColor(options.mainColors, this.mainColors);
        }
        if (Array.isArray(options.colors)) {
            this.addColor(options.colors, this.colors);
        }
        this.hex = options.value || '#f00';
        this.bindingEvents();
        this.onSelected.subscribe(function () {
            _this.addRecentColor(_this.hex);
        });
    }
    Object.defineProperty(Picker.prototype, "hex", {
        get: function () {
            return this.empty ? null : this._hex;
        },
        set: function (color) {
            var c = color ? normalizeHex(color) : null;
            if (c) {
                this.empty = false;
                this._hex = c;
                this._hsl = hex2Hsl(c);
                this._rgb = hex2Rgb(c);
                this._hsv = hex2Hsv(c);
                this._rgba = __assign(__assign({}, this._rgb), { a: this.resetAlpha ? 1 : this._rgba.a });
            }
            else {
                this.empty = true;
            }
            this.resetAlpha = true;
            this.render();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Picker.prototype, "hsl", {
        get: function () {
            return this.empty ? null : this._hsl;
        },
        set: function (color) {
            if (!color || typeof color.h !== 'number' || typeof color.s !== 'number' || typeof color.l !== 'number') {
                this.empty = true;
            }
            else {
                this.empty = false;
                this._hsl = color;
                this._hex = hsl2Hex(color);
                this._hsv = hsl2Hsv(color);
                this._rgb = hsl2Rgb(color);
                this._rgba = __assign(__assign({}, this._rgb), { a: this.resetAlpha ? 1 : this._rgba.a });
            }
            this.resetAlpha = true;
            this.render();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Picker.prototype, "rgb", {
        get: function () {
            return this.empty ? null : this._rgb;
        },
        set: function (color) {
            if (!color || typeof color.r !== 'number' || typeof color.g !== 'number' || typeof color.b !== 'number') {
                this.empty = true;
            }
            else {
                this.empty = false;
                this._rgb = color;
                this._rgba = __assign(__assign({}, color), { a: this.resetAlpha ? 1 : this._rgba.a });
                this._hsl = rgb2Hsl(color);
                this._hex = rgb2Hex(color);
                this._hsv = rgb2Hsv(color);
            }
            this.resetAlpha = true;
            this.render();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Picker.prototype, "rgba", {
        get: function () {
            return this.empty ? null : this._rgba;
        },
        set: function (color) {
            if (!color ||
                typeof color.r !== 'number' ||
                typeof color.g !== 'number' ||
                typeof color.b !== 'number' ||
                typeof color.a !== 'number') {
                this.empty = true;
            }
            else {
                this.empty = false;
                this._rgba = color;
                this._hsl = rgb2Hsl(color);
                this._hex = rgb2Hex(color);
                this._hsv = rgb2Hsv(color);
            }
            this.render();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Picker.prototype, "hsv", {
        get: function () {
            return this.empty ? null : this._hsv;
        },
        set: function (color) {
            if (!color || typeof color.h !== 'number' || typeof color.s !== 'number' || typeof color.v !== 'number') {
                this.empty = true;
            }
            else {
                this.empty = false;
                this._hsv = color;
                this._hex = hsv2Hex(color);
                this._hsl = hsv2Hsl(color);
                this._rgb = hsv2Rgb(color);
                this._rgba = __assign(__assign({}, this._rgb), { a: this.resetAlpha ? 1 : this._rgba.a });
            }
            this.resetAlpha = true;
            this.render();
        },
        enumerable: false,
        configurable: true
    });
    Picker.prototype.addRecentColor = function (color) {
        if (!color) {
            return;
        }
        this.recentColorOptions = this.recentColorOptions.filter(function (item) {
            return item !== color;
        });
        this.recentColorOptions.unshift(color);
        if (this.recentColorOptions.length >= 7) {
            this.recentColorOptions.length = 7;
        }
        this.renderRecentColors();
    };
    Picker.prototype.renderRecentColors = function () {
        var i = 0;
        while (i < 7) {
            var color = this.recentColorOptions[i];
            var el = this.recentElement.children[i];
            i++;
            if (color) {
                el.style.background = color;
                el.setAttribute('data-color', color);
            }
            else {
                el.style.background = '';
                el.removeAttribute('data-color');
            }
        }
    };
    Picker.prototype.addColor = function (colors, host) {
        var _this = this;
        colors.forEach(function (color) {
            var el = document.createElement('div');
            el.style.background = color;
            el.setAttribute('data-color', color);
            _this.colorElements.push(el);
            host.append(el);
        });
    };
    Picker.prototype.render = function () {
        var _this = this;
        if (!this.writing) {
            if (this.empty) {
                this.hslInputs[0].value = '';
                this.hslInputs[1].value = '';
                this.hslInputs[2].value = '';
                this.rgbInputs[0].value = '';
                this.rgbInputs[1].value = '';
                this.rgbInputs[2].value = '';
                this.hexInput.value = '';
                this.alphaValue.innerText = '1';
            }
            else {
                this.hslInputs[0].value = this.hsl.h + '';
                this.hslInputs[1].value = this.hsl.s + '';
                this.hslInputs[2].value = this.hsl.l + '';
                this.rgbInputs[0].value = this.rgb.r + '';
                this.rgbInputs[1].value = this.rgb.g + '';
                this.rgbInputs[2].value = this.rgb.b + '';
                this.hexInput.value = this.hex;
                this.alphaValue.innerText = Number(this.rgba.a.toFixed(2)) + '';
            }
        }
        this.palette.classList.remove('tanbo-color-picker-palette-empty');
        this.palette.style.background = "linear-gradient(to right, #fff, hsl(".concat(this._hsv.h, ", 100%, 50%))");
        this.palettePoint.style.left = "calc(".concat(this._hsv.s, "% - 6px)");
        this.palettePoint.style.top = "calc(".concat(100 - this._hsv.v, "% - 6px)");
        this.huePoint.style.top = "calc(".concat(this._hsv.h / 360 * 100, "% - 4px)");
        if (this.empty) {
            this.palette.classList.add('tanbo-color-picker-palette-empty');
            this.palette.style.background = '';
            this.valueViewer.style.background = '';
            this.alphaBar.style.background = '';
            this.alphaPoint.style.left = '100%';
        }
        else {
            this.valueViewer.style.background = "rgba(".concat(this.rgba.r, ", ").concat(this.rgba.g, ", ").concat(this.rgba.b, ", ").concat(this.rgba.a, ")");
            this.palette.classList.remove('tanbo-color-picker-palette-empty');
            this.palette.style.background = "linear-gradient(to right, #fff, hsl(".concat(this._hsv.h, ", 100%, 50%))");
            this.alphaBar.style.background = "linear-gradient(to right, transparent, ".concat(this.hex, ")");
            this.alphaPoint.style.left = (this.rgba.a || 0) * 100 + '%';
        }
        this.colorElements.forEach(function (el) {
            var v = el.getAttribute('data-color') || '';
            var hsl = any2Hsl(v);
            if (hsl === 'unknown' || !_this.hsl) {
                el.classList.remove('tanbo-color-picker-current');
                return;
            }
            if (hsl.l === _this.hsl.l && hsl.s === _this.hsl.s && hsl.h === _this.hsl.h) {
                el.classList.add('tanbo-color-picker-current');
            }
            else {
                el.classList.remove('tanbo-color-picker-current');
            }
        });
    };
    Picker.prototype.bindingEvents = function () {
        this.bindPaletteEvent();
        this.bindHueBarEvent();
        this.bindAlphaEvent();
        this.bindInputsEvent();
        this.bindSelectedEvent();
        this.bindColorOptionsEvent();
        this.bindSwitchEvent();
    };
    Picker.prototype.bindSwitchEvent = function () {
        var _this = this;
        this.switchBtn.addEventListener('click', function () {
            _this.host.classList.add('tanbo-color-picker-show-palette');
        });
        this.backBtn.addEventListener('click', function () {
            _this.host.classList.remove('tanbo-color-picker-show-palette');
        });
    };
    Picker.prototype.bindAlphaEvent = function () {
        var _this = this;
        var update = function (ev) {
            var position = _this.alphaBar.getBoundingClientRect();
            var offsetX = ev.clientX - position.left;
            offsetX = Math.max(0, offsetX);
            offsetX = Math.min(position.width, offsetX);
            _this.rgba = __assign(__assign({}, _this._rgba), { a: offsetX / position.width });
            _this.onChange.next(_this);
        };
        var mouseDownFn = function (ev) {
            update(ev);
            document.addEventListener('mousemove', mouseMoveFn);
            document.addEventListener('mouseup', mouseUpFn);
        };
        var mouseMoveFn = function (ev) {
            update(ev);
        };
        var mouseUpFn = function () {
            document.removeEventListener('mousemove', mouseMoveFn);
            document.removeEventListener('mouseup', mouseUpFn);
        };
        this.alphaBar.addEventListener('mousedown', mouseDownFn);
    };
    Picker.prototype.bindPaletteEvent = function () {
        var _this = this;
        var update = function (ev) {
            var position = _this.palette.getBoundingClientRect();
            var offsetX = ev.clientX - position.left;
            var offsetY = ev.clientY - position.top;
            var s = offsetX / 130 * 100;
            var v = 100 - offsetY / 130 * 100;
            s = Math.max(0, s);
            s = Math.min(100, s);
            v = Math.max(0, v);
            v = Math.min(100, v);
            _this.resetAlpha = false;
            _this.hsv = {
                h: _this._hsv.h,
                s: s,
                v: v
            };
            _this.onChange.next(_this);
        };
        var mouseDownFn = function (ev) {
            update(ev);
            document.addEventListener('mousemove', mouseMoveFn);
            document.addEventListener('mouseup', mouseUpFn);
        };
        var mouseMoveFn = function (ev) {
            update(ev);
        };
        var mouseUpFn = function () {
            document.removeEventListener('mousemove', mouseMoveFn);
            document.removeEventListener('mouseup', mouseUpFn);
        };
        this.palette.addEventListener('mousedown', mouseDownFn);
    };
    Picker.prototype.bindHueBarEvent = function () {
        var _this = this;
        var update = function (ev) {
            var position = _this.hueBar.getBoundingClientRect();
            var offsetY = ev.clientY - position.top;
            offsetY = Math.max(0, offsetY);
            offsetY = Math.min(100, offsetY);
            var h = 360 / 100 * offsetY;
            _this.resetAlpha = false;
            _this.hsv = {
                h: h,
                s: _this._hsv.s,
                v: _this._hsv.v
            };
            _this.onChange.next(_this);
        };
        var mouseDownFn = function (ev) {
            update(ev);
            document.addEventListener('mousemove', mouseMoveFn);
            document.addEventListener('mouseup', mouseUpFn);
        };
        var mouseMoveFn = function (ev) {
            update(ev);
        };
        var mouseUpFn = function () {
            document.removeEventListener('mousemove', mouseMoveFn);
            document.removeEventListener('mouseup', mouseUpFn);
        };
        this.hueBar.addEventListener('mousedown', mouseDownFn);
    };
    Picker.prototype.bindInputsEvent = function () {
        var _this = this;
        var updateByHSL = function (h, s, l) {
            _this.hex = hsl2Hex({ h: h, s: s, l: l });
            _this.onChange.next(_this);
        };
        var updateByRGB = function (r, g, b) {
            _this.hex = rgb2Hex({ r: r, g: g, b: b });
            _this.onChange.next(_this);
        };
        this.inputsWrap.addEventListener('input', function (ev) {
            _this.writing = true;
            var el = ev.target;
            var model = el.getAttribute('data-model');
            if (el.type === 'number') {
                var min = +el.min;
                var max = +el.max;
                el.value = Math.max(el.value, min);
                el.value = Math.min(el.value, max);
            }
            var _a = _this.hsl, h = _a.h, s = _a.s, l = _a.l;
            var _b = _this.rgb, r = _b.r, g = _b.g, b = _b.b;
            switch (model) {
                case 'H':
                    updateByHSL(el.value, s, l);
                    break;
                case 'S':
                    updateByHSL(h, el.value, l);
                    break;
                case 'L':
                    updateByHSL(h, s, el.value);
                    break;
                case 'R':
                    updateByRGB(el.value, g, b);
                    break;
                case 'G':
                    updateByRGB(r, el.value, b);
                    break;
                case 'B':
                    updateByRGB(r, g, el.value);
                    break;
                case 'HEX':
                    if (/^#(([0-9a-f]){3}){1,2}$/i.test(el.value)) {
                        _this.hex = el.value;
                        _this.onChange.next(_this);
                    }
                    break;
            }
            _this.writing = false;
        });
    };
    Picker.prototype.bindSelectedEvent = function () {
        var _this = this;
        this.checkBtn.addEventListener('click', function () {
            _this.host.classList.remove('tanbo-color-picker-show-palette');
            _this.onSelected.next(_this);
        });
    };
    Picker.prototype.bindColorOptionsEvent = function () {
        var _this = this;
        this.colorWrapper.addEventListener('click', function (ev) {
            var target = ev.target;
            if (!target.hasAttribute('data-color')) {
                return;
            }
            var c = target.getAttribute('data-color');
            if (/^rgba/.test(c)) {
                _this.rgba = parseCss(c);
            }
            else {
                _this.hex = c;
            }
            _this.onSelected.next(_this);
        });
    };
    return Picker;
}());

function createPicker(selector, options) {
    if (options === void 0) { options = {}; }
    return new Picker(selector, __assign({ mainColors: [
            '#000', '#333', '#444', '#555', '#666', '#777', '#888',
            '#999', '#aaa', '#bbb', '#ccc', '#ddd', '#eee', '#fff',
        ], colors: [
            '#fec6c2', '#fee5c3', '#fefcc3', '#baf6c4', '#c3ebfe', '#c3cbfe', '#e1caff',
            '#fc8e88', '#fccc88', '#fcf888', '#76ec8a', '#88d8fc', '#97a4fb', '#c098f4',
            '#ff6666', '#ffb151', '#fada3a', '#18c937', '#3aaafa', '#6373e2', '#a669f7',
            '#f63030', '#f88933', '#deb12a', '#038e23', '#1276cc', '#3f52ce', '#8838ed',
            '#c60000', '#d86912', '#b88811', '#086508', '#144c93', '#1b2eaa', '#6117bf',
        ] }, options));
}

export { Picker, createPicker, template };
