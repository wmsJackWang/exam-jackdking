import { AbstractType, Type } from './type';
import { InjectFlags } from './injector';
import { InjectionToken } from './injection-token';
import { ForwardRef } from './forward-ref';
export interface Inject {
    token: InjectionToken<any> | Type<any> | ForwardRef<InjectionToken<any> | Type<any>>;
}
export interface InjectDecorator {
    (token: InjectionToken<any> | Type<any> | ForwardRef<InjectionToken<any> | Type<any>>): ParameterDecorator;
    new (token: InjectionToken<any> | Type<any> | ForwardRef<InjectionToken<any> | Type<any>>): Inject;
}
/**
 * 构造函数参数装饰器，用于改变注入 token
 */
export declare const Inject: InjectDecorator;
export interface Self {
}
export interface SelfDecorator {
    (): ParameterDecorator;
    new (): Self;
}
export declare const Self: SelfDecorator;
export interface SkipSelf {
}
export interface SkipSelfDecorator {
    (): ParameterDecorator;
    new (): SkipSelf;
}
export declare const SkipSelf: SkipSelfDecorator;
export interface Optional {
}
export interface OptionalDecorator {
    (): ParameterDecorator;
    new (): Optional;
}
export declare const Optional: OptionalDecorator;
export interface TypeDecorator {
    <T extends Type<any>>(type: T): T;
    (target: unknown, propertyKey?: string | symbol, parameterIndex?: number): void;
}
export interface Prop {
}
export interface PropDecorator {
    <T>(token?: Type<T> | AbstractType<T> | InjectionToken<T> | ForwardRef<T>, notFoundValue?: T, flags?: InjectFlags): PropertyDecorator;
    new (token: any): Prop;
}
export declare const Prop: PropDecorator;
