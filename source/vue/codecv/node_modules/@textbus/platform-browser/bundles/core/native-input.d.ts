import { Injector } from '@tanbo/di';
import { Observable } from '@tanbo/stream';
import { Commander, Controller, Keyboard, Renderer, Scheduler, Selection } from '@textbus/core';
import { Caret, CaretPosition, CompositionState, Input, Scroller } from './types';
import { Parser } from '../dom-support/parser';
declare class NativeCaret implements Caret {
    private scheduler;
    onPositionChange: Observable<CaretPosition | null>;
    set nativeRange(range: Range | null);
    get nativeRange(): Range | null;
    get rect(): import("../_utils/uikit").Rect;
    private oldPosition;
    private _nativeRange;
    private subs;
    private positionChangeEvent;
    constructor(scheduler: Scheduler);
    refresh(): void;
    correctScrollTop(scroller: Scroller): void;
    destroy(): void;
}
export declare class NativeInput extends Input {
    private injector;
    private parser;
    private scheduler;
    private selection;
    private keyboard;
    private renderer;
    private commander;
    private controller;
    caret: NativeCaret;
    composition: boolean;
    compositionState: CompositionState | null;
    onReady: Promise<void>;
    set disabled(b: boolean);
    get disabled(): boolean;
    private _disabled;
    private documentView;
    private nativeSelection;
    private subscription;
    private nativeRange;
    private isSafari;
    private isMac;
    private isMobileBrowser;
    private ignoreComposition;
    constructor(injector: Injector, parser: Parser, scheduler: Scheduler, selection: Selection, keyboard: Keyboard, renderer: Renderer, commander: Commander, controller: Controller);
    focus(nativeRange: Range): void;
    blur(): void;
    destroy(): void;
    private handleDefaultActions;
    private handlePaste;
    private handleShortcut;
    private handleInput;
    private handleMobileInput;
    private handlePCInput;
}
export {};
