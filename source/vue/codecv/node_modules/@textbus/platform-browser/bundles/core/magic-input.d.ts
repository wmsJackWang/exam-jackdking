import { Observable } from '@tanbo/stream';
import { Injector } from '@tanbo/di';
import { Commander, Controller, Keyboard, Scheduler, Selection } from '@textbus/core';
import { Parser } from '../dom-support/parser';
import { Caret, CaretPosition, CompositionState, Input, Scroller } from './types';
interface CaretStyle {
    height: string;
    lineHeight: string;
    fontSize: string;
}
declare class ExperimentalCaret implements Caret {
    private scheduler;
    private editorMask;
    onPositionChange: Observable<CaretPosition | null>;
    onStyleChange: Observable<CaretStyle>;
    elementRef: HTMLElement;
    compositionState: CompositionState | null;
    get rect(): DOMRect;
    compositionElement: HTMLElement;
    private timer;
    private caret;
    private oldPosition;
    private set display(value);
    private get display();
    private _display;
    private flashing;
    private subs;
    private subscription;
    private positionChangeEvent;
    private styleChangeEvent;
    private oldRange;
    private isFixed;
    constructor(scheduler: Scheduler, editorMask: HTMLElement);
    refresh(isFixedCaret?: boolean): void;
    show(range: Range, restart: boolean): void;
    hide(): void;
    destroy(): void;
    correctScrollTop(scroller: Scroller): void;
    private updateCursorPosition;
}
/**
 * Textbus PC 端输入实现
 */
export declare class MagicInput extends Input {
    private parser;
    private keyboard;
    private commander;
    private selection;
    private controller;
    private scheduler;
    private injector;
    composition: boolean;
    compositionState: CompositionState | null;
    onReady: Promise<void>;
    caret: ExperimentalCaret;
    set disabled(b: boolean);
    get disabled(): boolean;
    private isSafari;
    private isFirefox;
    private isMac;
    private isWindows;
    private _disabled;
    private container;
    private subscription;
    private doc;
    private textarea;
    private isFocus;
    private nativeFocus;
    private ignoreComposition;
    constructor(parser: Parser, keyboard: Keyboard, commander: Commander, selection: Selection, controller: Controller, scheduler: Scheduler, injector: Injector);
    focus(range: Range, restart: boolean): void;
    blur(): void;
    destroy(): void;
    private init;
    private handleDefaultActions;
    private handlePaste;
    private handleShortcut;
    private handleInput;
    private createEditableFrame;
}
export {};
