import { NativeNode, NativeRenderer } from '@textbus/core';
/**
 * Textbus PC 端浏览器渲染能力实现
 */
export declare class DomRenderer implements NativeRenderer {
    isSVG: RegExp;
    xlinkNameSpace: string;
    possibleXlinkNames: {
        xlinkActuate: string;
        xlinkactuate: string;
        'xlink:actuate': string;
        xlinkArcrole: string;
        xlinkarcrole: string;
        'xlink:arcrole': string;
        xlinkHref: string;
        xlinkhref: string;
        'xlink:href': string;
        xlinkRole: string;
        xlinkrole: string;
        'xlink:role': string;
        xlinkShow: string;
        xlinkshow: string;
        'xlink:show': string;
        xlinkTitle: string;
        xlinktitle: string;
        'xlink:title': string;
        xlinkType: string;
        xlinktype: string;
        'xlink:type': string;
    };
    booleanProps: Record<string, string[]>;
    valueProps: Record<string, string[]>;
    listen<T = any>(node: NativeNode, type: string, callback: (ev: T) => any): void;
    unListen(node: NativeNode, type: string, callback: (ev: any) => any): void;
    createTextNode(textContent: string): NativeNode;
    createElement(name: string): NativeNode;
    appendChild(parent: NativeNode, newChild: NativeNode): void;
    remove(node: NativeNode): void;
    insertBefore(newNode: NativeNode, ref: NativeNode): void;
    getChildByIndex(parent: NativeNode, index: number): NativeNode | null;
    addClass(target: NativeNode, name: string): void;
    removeClass(target: NativeNode, name: string): void;
    setStyle(target: NativeNode, key: string, value: any): void;
    syncTextContent(target: NativeNode, content: string): void;
    removeStyle(target: NativeNode, key: string): void;
    setAttribute(target: NativeNode, key: string, value: string): void;
    removeAttribute(target: NativeNode, key: string): void;
    setXlinkAttribute(target: NativeNode, key: string, value: string): void;
    removeXlinkAttribute(target: NativeNode, key: string): void;
    replace(newChild: NativeNode, oldChild: NativeNode): void;
    copy(): void;
    static replaceEmpty(s: string): string;
}
