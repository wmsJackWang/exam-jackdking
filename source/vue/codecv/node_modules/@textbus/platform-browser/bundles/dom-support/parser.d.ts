import { Injector } from '@tanbo/di';
import { Attribute, ComponentInstance, Formatter, FormatValue, Slot } from '@textbus/core';
import { ViewOptions } from '../core/types';
/**
 * 组件可附加携带的信息，如一些样式表、脚本、或编辑时模式时的样式
 */
export interface ComponentResources {
    links?: Array<{
        [key: string]: string;
    }>;
    styles?: string[];
    scripts?: string[];
    editModeStyles?: string[];
}
/**
 * 插槽解析器
 */
export interface SlotParser {
    /**
     * 将指定 DOM 节点解析为插槽数据
     * @param childSlot 储存数据的插槽
     * @param slotRootElement 插槽的根节点
     * @param slotContentHostElement 插槽的内容节点
     *
     * 注意：当不传入内容节点时，Textbus 会把根节点当成内容节点
     */ <T extends Slot>(childSlot: T, slotRootElement: HTMLElement, slotContentHostElement?: HTMLElement): T;
}
/**
 * 组件加载器
 */
export interface ComponentLoader {
    /** 组件所需要的外部资源 */
    resources?: ComponentResources;
    /** 识别组件的匹配方法 */
    match(element: HTMLElement): boolean;
    /** 读取组件内容的方法 */
    read(element: HTMLElement, injector: Injector, slotParser: SlotParser): ComponentInstance | Slot | void;
}
export interface FormatLoaderReadResult<T extends FormatValue> {
    formatter: Formatter<T>;
    value: T;
}
/**
 * 格式加载器
 */
export interface FormatLoader<T extends FormatValue> {
    /**
     * 匹配一个 DOM 节点是否是某个格式节点
     * @param element
     */
    match(element: HTMLElement): boolean;
    /**
     * 读取匹配到的节点，并返回读取后的信息
     * @param element
     */
    read(element: HTMLElement): FormatLoaderReadResult<T>;
}
export interface AttributeLoaderReadResult<T extends FormatValue> {
    attribute: Attribute<T>;
    value: T;
}
/**
 * 属性加载器
 */
export interface AttributeLoader<T extends FormatValue> {
    /**
     * 匹配一个 DOM 节点是否是某个属性节点
     * @param element
     */
    match(element: HTMLElement): boolean;
    /**
     * 读取匹配到的节点，并返回读取后的信息
     * @param element
     */
    read(element: HTMLElement): AttributeLoaderReadResult<T>;
}
/**
 * 用于解析 HTML，并把 HTML 内容转换为 Textbus 可以支持的组件或插槽数据
 */
export declare class Parser {
    private options;
    private injector;
    static parseHTML(html: string): HTMLElement;
    componentLoaders: ComponentLoader[];
    formatLoaders: FormatLoader<any>[];
    attributeLoaders: AttributeLoader<any>[];
    constructor(options: ViewOptions, injector: Injector);
    /**
     * 使用指定的组件加载器解析一段 HTML 字符串或 DOM 元素
     * @param html
     * @param rootComponentLoader
     */
    parseDoc(html: string | HTMLElement, rootComponentLoader: ComponentLoader): void | Slot<any> | ComponentInstance<import("@textbus/core").ComponentExtends, any, unknown>;
    /**
     * 将一段 HTML 或 DOM 元素解析到指定插槽
     * @param html
     * @param rootSlot
     */
    parse(html: string | HTMLElement, rootSlot: Slot): Slot<any>;
    private readComponent;
    private readText;
    private readFormats;
    private readSlot;
    private applyFormats;
}
