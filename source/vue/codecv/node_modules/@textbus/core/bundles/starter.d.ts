import { Injector, Provider, ReflectiveInjector, Scope } from '@tanbo/di';
import { ComponentInstance, Formatter, Component, NativeNode, Attribute } from './model/_api';
/**
 * Textbus 插件接口
 */
export interface Plugin {
    /**
     * 编辑器初始化时调用的勾子
     * @param injector 访问 Textbus 内部实例的 IoC 容器
     */
    setup(injector: Injector): void;
    /**
     * 当编辑器销毁时调用
     */
    onDestroy?(): void;
}
/**
 * Textbus 模块配置
 */
export interface Module {
    /** 组件列表 */
    components?: Component[];
    /** 格式列表 */
    formatters?: (Formatter<any> | ((injector: Injector) => Formatter<any>))[];
    /** 属性列表 */
    attributes?: (Attribute<any> | ((injector: Injector) => Attribute<any>))[];
    /** 跨平台及基础扩展实现的提供者 */
    providers?: Provider[];
    /** 插件集合 */
    plugins?: Array<Plugin | (() => Plugin)>;
    /**
     * 当模块注册时调用
     */
    beforeEach?(starter: Starter): void;
    /**
     * 初始化时的设置，返回一个函数，当 Textbus 销毁时调用
     * @param starter
     */
    setup?(starter: Starter): Promise<(() => void) | void> | (() => void) | void;
}
/**
 * Textbus 核心配置
 */
export interface TextbusConfig extends Module {
    /** 导入第三方包 */
    imports?: Module[];
    /** 开启 Zen Coding 支持 */
    zenCoding?: boolean;
    /** 最大历史记录栈 */
    historyStackSize?: number;
    /** 是否只读 */
    readonly?: boolean;
}
/**
 * Textbus 内核启动器
 */
export declare class Starter extends ReflectiveInjector {
    config: TextbusConfig;
    static diScope: Scope;
    private beforeDestroyCallbacks;
    private plugins;
    private isDestroyed;
    constructor(config: TextbusConfig);
    /**
     * 启动一个 Textbus 实例，并将根组件渲染到原生节点
     * @param host 原生节点
     * @param rootComponent 根组件
     */
    mount(host: NativeNode, rootComponent: ComponentInstance): Promise<this>;
    /**
     * 销毁 Textbus 实例
     */
    destroy(): void;
    private mergeModules;
    private bindContext;
}
