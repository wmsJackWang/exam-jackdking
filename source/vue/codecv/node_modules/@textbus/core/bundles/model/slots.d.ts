import { Observable } from '@tanbo/stream';
import { Slot } from './slot';
import { ComponentInstance } from './component';
import { Operation } from './types';
/**
 * Textbus 管理组件内部插槽增删改查的类
 */
export declare class Slots<T = any> {
    host: ComponentInstance;
    readonly onChildSlotRemove: Observable<Slot<T>[]>;
    readonly onChange: Observable<Operation>;
    readonly onChildSlotChange: Observable<Slot<T>>;
    /** 子插槽的个数 */
    get length(): number;
    /** 最后一个子插槽 */
    get last(): Slot<T>;
    /** 第一个子插槽 */
    get first(): Slot<T>;
    get index(): number;
    private slots;
    private _index;
    private changeEvent;
    private childSlotChangeEvent;
    private childSlotRemoveEvent;
    private changeListeners;
    constructor(host: ComponentInstance, slots?: Slot<T>[]);
    /**
     * 获取子插槽的下标位置
     * @param slot
     */
    indexOf(slot: Slot<T>): number;
    /**
     * 删除指定插槽
     * @param slot
     */
    remove(slot: Slot<T>): boolean;
    /**
     * 把新插槽插入到指定插槽的后面
     * @param slots
     * @param ref
     */
    insertAfter(slots: Slot<T> | Slot<T>[], ref: Slot<T>): void;
    /**
     * 把新插槽插入到指定插槽的前面
     * @param slots
     * @param ref
     */
    insertBefore(slots: Slot<T> | Slot<T>[], ref: Slot<T>): void;
    /**
     * 把新插槽插入到指定下标位置
     * @param slots
     * @param index
     */
    insertByIndex(slots: Slot<T> | Slot<T>[], index: number): void;
    /**
     * 把新插槽添加到最后
     * @param slots
     */
    push(...slots: Slot<T>[]): void;
    /**
     * 删除最后一个插槽并返回
     */
    pop(): Slot<T> | null;
    /**
     * 删除第一个插槽并返回
     */
    shift(): Slot<T> | null;
    /**
     * 把新插槽添加到最前
     * @param slots
     */
    unshift(...slots: Slot<T>[]): void;
    /**
     * 获取指定下标位置的插槽
     * @param index
     */
    get(index: number): Slot<T> | null;
    /**
     * 替换插槽
     * @param oldSlot 被替换的插槽
     * @param newSlot 新的插槽
     */
    replace(oldSlot: Slot<T>, newSlot: Slot<T>): void;
    /**
     * 把所有子插槽转换为 JSON
     */
    toJSON(): import("./slot").SlotLiteral<T, import("./format").FormatValue>[];
    /**
     * 把当前插槽集合转换为数组
     */
    toArray(): Slot<T>[];
    /**
     * 清空子插槽
     */
    clean(): void;
    /**
     * 插入新的子插槽
     * @param slots
     */
    insert(...slots: Slot<T>[]): void;
    /**
     * 设置新的下标
     * @param index
     */
    retain(index: number): void;
    /**
     * 从下标位置向后删除指定数量的子插槽
     * @param count
     */
    delete(count: number): void;
    /**
     * 剪切子插槽
     * @param startIndex
     * @param endIndex
     */
    cut(startIndex?: number, endIndex?: number): Slot<T>[];
    /**
     * 根据范围切分出一组子插槽
     * @param startIndex
     * @param endIndex
     */
    slice(startIndex?: number, endIndex?: number): Slot<T>[];
    /**
     * 当前集合是否包含指定插槽
     * @param slot
     */
    has(slot: Slot<T>): boolean;
    toString(): string;
}
