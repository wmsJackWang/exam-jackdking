import { Observable, Subject } from '@tanbo/stream';
import { Draft } from 'immer';
import { ComponentInstance, ComponentLiteral } from './component';
import { Content } from './content';
import { FormatLiteral, FormatRange, FormatValue, Formats, FormatTree, FormatItem } from './format';
import { Attribute, Formatter } from './attribute';
import { ChangeMarker } from './change-marker';
import { Action, StateChange } from './types';
export declare enum ContentType {
    Text = 1,
    InlineComponent = 2,
    BlockComponent = 3
}
export interface SlotLiteral<T, U extends FormatValue> {
    schema: ContentType[];
    content: Array<string | ComponentLiteral>;
    attributes: Record<string, U>;
    formats: FormatLiteral<U>;
    state: T | null;
}
export interface DeltaInsert {
    insert: string | ComponentInstance;
    formats: Formats;
}
export declare class DeltaLite extends Array<DeltaInsert> {
    attributes: Map<Attribute<any>, any>;
}
/**
 * Textbus 插槽类，用于管理组件、文本及格式的增删改查
 */
export declare class Slot<T = any> {
    state?: T | undefined;
    static placeholder: string;
    static get emptyPlaceholder(): string;
    /** 插槽所属的组件 */
    parent: ComponentInstance | null;
    /** 插槽变更标记器 */
    changeMarker: ChangeMarker;
    onContentChange: Observable<Action[]>;
    onStateChange: Observable<StateChange<T>>;
    onChildComponentRemove: Observable<ComponentInstance[]>;
    readonly schema: ContentType[];
    private componentChangeListeners;
    private childComponentRemoveEvent;
    get parentSlot(): Slot<any> | null;
    /** 插槽内容长度 */
    get length(): number;
    /** 插槽内容是否为空 */
    get isEmpty(): boolean;
    /** 插槽当前下标位置 */
    get index(): number;
    /**
     * @internal
     * 插槽的 id，用于优化 diff 算法
     */
    readonly id: number;
    protected _index: number;
    protected content: Content;
    protected format: any;
    protected attributes: Map<Attribute<any>, any>;
    protected contentChangeEvent: Subject<Action[]>;
    protected stateChangeEvent: Subject<StateChange<T>>;
    protected applyFormatCoverChild: boolean;
    constructor(schema: ContentType[], state?: T | undefined);
    /**
     * 设置属性
     * @param attribute
     * @param value
     */
    setAttribute(attribute: Attribute<any>, value: FormatValue): void;
    /**
     * 获取属性
     * @param attribute
     */
    getAttribute(attribute: Attribute<any>): any;
    /**
     * 获取所有属性
     */
    getAttributes(): [Attribute<any>, any][];
    /**
     * 删除属性
     * @param attribute
     */
    removeAttribute(attribute: Attribute<any>): void;
    /**
     * 根据是否包含指定 Attribute
     * @param attribute
     */
    hasAttribute(attribute: Attribute<any>): boolean;
    /**
     * 更新插槽状态的方法
     * @param fn
     * @param record
     */
    updateState(fn: (draft: Draft<T>) => void, record?: boolean): T;
    /**
     * 向插槽内写入内容，并根据当前位置的格式，自动扩展
     * @param content
     * @param formats
     */
    write(content: string | ComponentInstance, formats?: Formats): boolean;
    write(content: string | ComponentInstance, formatter?: Formatter<any>, value?: FormatValue): boolean;
    /**
     * 向插槽内写入内容，并可同时应用格式
     * @param content
     * @param formats
     */
    insert(content: string | ComponentInstance, formats?: Formats): boolean;
    insert(content: string | ComponentInstance, formatter?: Formatter<any>, value?: FormatValue): boolean;
    /**
     * 如果没有传入格式参数，则移动插槽下标到 offset
     * 如果有传入格式参数，则以当前下标位置向后增加 offset 的区间内设置样式
     * @param offset
     */
    retain(offset: number): boolean;
    retain(offset: number, formats: Formats): boolean;
    retain(offset: number, formatter: Formatter<any>, value: FormatValue | null): boolean;
    /**
     * 从当前位置向后删除指定长度的内容
     * @param count
     */
    delete(count: number): boolean;
    /**
     * 给插槽应用新的格式，如果为块级样式，则应用到整个插槽，否则根据参数配置的范围应用
     * @param formatter
     * @param data
     */
    applyFormat<U extends FormatValue>(formatter: Formatter<U>, data: FormatRange<U>): void;
    /**
     * 在当前插槽内删除指定的组件
     * @param component
     */
    removeComponent(component: ComponentInstance): boolean;
    /**
     * 剪切插槽内指定范围的内容
     * @param startIndex
     * @param endIndex
     */
    cut(startIndex?: number, endIndex?: number): Slot;
    /**
     * 把当前插槽内指定范围的内容剪切到新插槽
     * @param slot 新插槽
     * @param startIndex
     * @param endIndex
     */
    cutTo<U extends Slot>(slot: U, startIndex?: number, endIndex?: number): U;
    /**
     * 查找组件在插槽内的索引
     * @param component
     */
    indexOf(component: ComponentInstance): number;
    /**
     * 查找指定下标位置的内容
     * @param index
     */
    getContentAtIndex(index: number): string | ComponentInstance<import("./component").ComponentExtends, any, unknown>;
    /**
     * 切分出插槽内指定范围的内容
     * @param startIndex
     * @param endIndex
     */
    sliceContent(startIndex?: number, endIndex?: number): (string | ComponentInstance<import("./component").ComponentExtends, any, unknown>)[];
    /**
     * 根据插槽的格式数据，生成格式树
     */
    createFormatTree(): FormatTree<FormatValue>;
    /**
     * 获取传入格式在插槽指定内范围的集合
     * @param formatter 指定的格式
     * @param startIndex
     * @param endIndex
     */
    getFormatRangesByFormatter<U extends FormatValue>(formatter: Formatter<U>, startIndex: number, endIndex: number): FormatRange<U>[];
    /**
     * 获取插槽格式的数组集合
     */
    getFormats(): FormatItem<FormatValue>[];
    /**
     * 提取 index 下标位置的格式
     * @param index
     */
    extractFormatsByIndex(index: number): Formats;
    /**
     * 把插槽内容转换为 JSON
     */
    toJSON<U extends FormatValue>(): SlotLiteral<T, U>;
    toString(): string;
    /**
     * 将插槽数据转换为 delta 表示
     */
    toDelta(): DeltaLite;
    /**
     * 根据 delta 插入内容
     * @param delta
     */
    insertDelta(delta: DeltaLite): DeltaLite;
    /**
     * 清除插槽格式
     * @param excludeFormats 要排除的格式
     * @param startIndex 开始位置
     * @param endIndex 结束位置
     */
    cleanFormats(excludeFormats?: Formatter<any>[] | ((formatter: Formatter<any>) => boolean), startIndex?: number, endIndex?: number): void;
    /**
     * 当在回调函数中应用样式时，将把应用的样式作为子插槽的最低优化级合并
     * @param fn
     */
    background(fn: () => void): void;
    /**
     * 清除插槽属性
     * @param excludeAttributes 要排除的属性
     */
    cleanAttributes(excludeAttributes?: Attribute<any>[] | ((attribute: Attribute<any>) => boolean)): void;
    private applyFormats;
    private static createActionByFormat;
}
