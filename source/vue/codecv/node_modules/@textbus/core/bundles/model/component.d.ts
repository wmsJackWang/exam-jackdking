import { Draft } from 'immer';
import { Observable } from '@tanbo/stream';
import { AbstractType, Type, InjectionToken, InjectFlags, Injector } from '@tanbo/di';
import { VElement, VTextNode } from './element';
import { ContentType, Slot, SlotLiteral } from './slot';
import { Formats } from './format';
import { ChangeMarker } from './change-marker';
import { Slots } from './slots';
import { RenderMode, StateChange } from './types';
export interface SlotsComponentInitData<State, SlotState> {
    slots: Slot<SlotState>[];
    state?: State;
}
export interface StateComponentInitData<State, SlotState> {
    slots?: Slot<SlotState>[];
    state: State;
}
/**
 * 组件初始化数据
 */
export type ComponentInitData<State = unknown, SlotState = unknown> = SlotsComponentInitData<State, SlotState> | StateComponentInitData<State, SlotState>;
/**
 * 组件 JSON 字面量接口
 */
export interface ComponentLiteral<State = any> {
    name: string;
    slots: SlotLiteral<any, any>[];
    state: State;
}
/**
 * 插槽渲染的工厂函数
 */
export interface SlotRenderFactory {
    (children: Array<VElement | VTextNode>): VElement;
}
/**
 * 渲染插槽函数的定义
 */
export interface SlotRender {
    (slot: Slot, factory: SlotRenderFactory): VElement;
}
/**
 * 渲染组件函数的定义
 */
export interface ComponentRender {
    (slotRender: SlotRender, renderMode: RenderMode): VElement;
}
/**
 * 组件 setup 函数返回值必须要实现的接口
 */
export interface ComponentExtends {
    render: ComponentRender;
}
export interface Key {
    match: RegExp | ((key: string) => boolean);
    name: string | string[];
}
export interface Keymap {
    ctrlKey?: boolean;
    shiftKey?: boolean;
    altKey?: boolean;
    key: string | string[] | Key;
}
export interface Shortcut {
    keymap: Keymap;
    action(key: string): boolean | void;
}
export interface ZenCodingGrammarInterceptor<Data = any> {
    /** 匹配字符 */
    match: RegExp | ((content: string) => boolean);
    /** 触发键 */
    key: string | string[] | RegExp | ((content: string) => boolean);
    /** 触发执行的方法 */
    generateInitData(content: string, injector: Injector): Data;
}
/**
 * 组件实例对象
 */
export interface ComponentInstance<Extends extends ComponentExtends = ComponentExtends, State = any, SlotState = unknown> {
    /**
     * 组件所在的插槽
     * @readonly
     * @internal
     */
    parent: Slot | null;
    /**
     * 父组件
     * @readonly
     * @internal
     */
    parentComponent: ComponentInstance | null;
    /** 组件变化标识器 */
    changeMarker: ChangeMarker;
    /** 组件是否可拆分 */
    separable: boolean;
    /** 组件名 */
    name: string;
    /** 组件长度，固定为 1 */
    length: 1;
    /** 组件类型 */
    type: ContentType;
    /** 组件的子插槽集合 */
    slots: Slots<SlotState>;
    /** 组件内部实现的方法 */
    extends: Extends;
    /** 组件动态上下文菜单注册表 */
    shortcutList: Shortcut[];
    /** 当状态变更时触发 */
    onStateChange: Observable<StateChange<State>>;
    /** 组件状态 */
    get state(): State;
    /**
     * 更新组件状态的方法
     * @param fn
     * @param record
     */
    updateState(fn: (draft: Draft<State>) => void, record?: boolean): State;
    /**
     * 组件转为 JSON 数据的方法
     */
    toJSON(): ComponentLiteral<State>;
    /**
     * 将组件转换为 string
     */
    toString(): string;
}
/**
 * Textbus 扩展组件接口
 */
export interface ComponentOptions<Extends extends ComponentExtends, State, SlotState> {
    /** 组件名 */
    name: string;
    /** 组件类型 */
    type: ContentType;
    /** 组件是否可拆分 */
    separable?: boolean;
    /** 输入语法糖支持 */
    zenCoding?: ZenCodingGrammarInterceptor<ComponentInitData<State, SlotState>> | ZenCodingGrammarInterceptor<ComponentInitData<State, SlotState>>[];
    /**
     * 组件初始化实现
     * @param initData
     */
    setup(initData?: ComponentInitData<State, SlotState>): Extends;
}
/**
 * Textbus 组件
 */
export interface Component<Instance extends ComponentInstance = ComponentInstance, State extends ComponentInitData = ComponentInitData> {
    /** 组件名 */
    name: string;
    /** 实例数据类型 */
    instanceType: ContentType;
    /** 组件是否可拆分 */
    separable: boolean;
    zenCoding?: ZenCodingGrammarInterceptor<State> | ZenCodingGrammarInterceptor<State>[];
    /**
     * 组件创建实例的方法
     * @param context
     * @param data
     */
    createInstance(context: Injector, data?: State): Instance;
}
/**
 * 组件内状态管理器
 */
export interface ChangeController<T> {
    /** 组件状态变化时触发 */
    onChange: Observable<T>;
    /**
     * 组件状态更新函数
     * @param fn
     * @param record 是否记录此次状态变更
     */
    update(fn: (draft: Draft<T>) => void, record?: boolean): T;
}
export declare class Ref<T> {
    current: T | null;
    constructor(current?: T | null);
}
/**
 * 插入内容事件对象
 */
export interface InsertEventData {
    /** 插槽插入的位置 */
    index: number;
    /** 当前插入的内容 */
    content: string | ComponentInstance;
    /** 当前插入的附加的格式 */
    formats: Formats;
}
/**
 * 换行事件对象
 */
export interface BreakEventData {
    /** 换行事件插槽的第几位触发的换行操作 */
    index: number;
}
/**
 * 删除数据事件对象
 */
export interface DeleteEventData {
    /** 删除数据的位置 */
    index: number;
    /** 删除数据的长度 */
    count: number;
    /** 是否是向结束位置删除 */
    toEnd: boolean;
    /** 删除内容还是移动内容 */
    actionType: 'delete' | 'move';
}
/**
 * 插槽删除事件对象
 */
export interface SlotRemoveEventData {
    /** 删除数据的位置 */
    index: number;
    /** 删除数据的长度 */
    count: number;
    /** 是否是向结束位置删除 */
    toEnd: boolean;
}
/**
 * 粘贴事件对象
 */
export interface PasteEventData {
    /** 标识粘贴发生在插槽的第几位 */
    index: number;
    /** 粘贴的内容 */
    data: Slot;
    /** 粘贴内容的纯文本 */
    text: string;
}
/**
 * 组合输入开始事件对象
 */
export interface CompositionStartEventData {
    /** 标识在插槽的第几位触发 */
    index: number;
}
/**
 * 组合输入更新事件对象
 */
export interface CompositionUpdateEventData {
    /** 标识在插槽的第几位触发 */
    index: number;
    /** 组件数据输入的数据 */
    data: string;
}
/**
 * 上下文本菜单配置项
 */
export interface ContextMenuItem {
    iconClasses?: string[];
    label: string;
    disabled?: boolean;
    onClick(): void;
}
/**
 * 自定义上下文本菜单配置项
 */
export interface ContextMenuCustomItem<T = unknown> {
    type: string;
    value?: T;
    disabled?: boolean;
    validate?(value: T): true | string;
    onComplete(value: T): void;
}
/**
 * 上下文多级菜单配置项
 */
export interface ContextMenuGroup {
    iconClasses?: string[];
    label: string;
    disabled?: boolean;
    submenu: Array<ContextMenuItem | ContextMenuCustomItem>;
}
export type ContextMenuConfig = ContextMenuGroup | ContextMenuItem;
export interface SlotRange {
    slot: Slot;
    startIndex: number;
    endIndex: number;
}
/**
 * 原生元素节点抽象类型
 */
export type NativeNode = {} & any;
export interface EventTypes {
    onUnselect: () => void;
    onSelected: () => void;
    onFocus: () => void;
    onBlur: () => void;
    onFocusIn: () => void;
    onFocusOut: () => void;
    onViewChecked: () => void;
    onViewInit: () => void;
    onDestroy: () => void;
    onParentSlotUpdated: () => void;
    onSelectionFromFront: (event: Event<ComponentInstance>) => void;
    onSelectionFromEnd: (event: Event<ComponentInstance>) => void;
    onBreak: (event: Event<Slot, BreakEventData>) => void;
    onPaste: (event: Event<Slot, PasteEventData>) => void;
    onContextMenu: (event: ContextMenuEvent<ComponentInstance>) => void;
    onContentInserted: (event: Event<Slot, InsertEventData>) => void;
    onContentInsert: (event: Event<Slot, InsertEventData>) => void;
    onContentDelete: (event: Event<Slot, DeleteEventData>) => void;
    onContentDeleted: (event: Event<Slot>) => void;
    onSlotRemove: (event: Event<ComponentInstance, SlotRemoveEventData>) => void;
    onSlotRemoved: (event: Event<ComponentInstance>) => void;
    onGetRanges: (event: GetRangesEvent<ComponentInstance>) => void;
    onDirtyViewClean: (event: Event<ComponentInstance, NativeNode>) => void;
    onCompositionStart: (event: Event<Slot, CompositionStartEventData>) => void;
    onCompositionUpdate: (event: Event<Slot, CompositionUpdateEventData>) => void;
    onCompositionEnd: (event: Event<Slot>) => void;
}
/**
 * 提取组件的实例类型
 */
export type ExtractComponentInstanceType<T> = T extends Component<infer S> ? S : never;
/**
 * 提取组件扩展类型
 */
export type ExtractComponentInstanceExtendsType<T> = T extends Component<ComponentInstance<infer S>> ? S : never;
/**
 * 提取组件状态类型
 */
export type ExtractComponentStateType<T> = T extends Component<ComponentInstance<any, infer S>> ? S : never;
/**
 * Textbus 扩展组件方法
 * @param options
 */
export declare function defineComponent<Extends extends ComponentExtends, State = any, SlotState = any>(options: ComponentOptions<Extends, State, SlotState>): Component<ComponentInstance<Extends, State, SlotState>, ComponentInitData<State, SlotState>>;
/**
 * 组件 setup 方法内获取编辑器 IoC 容器的勾子
 */
export declare function useContext(): Injector;
export declare function useContext<T>(token: Type<T> | AbstractType<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;
/**
 * 组件 setup 方法内获取组件实例的勾子
 */
export declare function useSelf<T extends ComponentInstance>(): T;
/**
 * 组件使用子插槽的方法
 * @param slots 子插槽数组
 */
export declare function useSlots<T>(slots: Slot<T>[]): Slots<T>;
/**
 * 组件注册状态管理器的勾子
 * @param initState
 */
export declare function useState<T>(initState: T): ChangeController<T>;
/**
 * 组件单元素引用勾子
 */
export declare function useRef<T>(initValue?: T | null): Ref<T>;
/**
 * 组件注册动态快捷键的勾子
 * @param config
 */
export declare function useDynamicShortcut(config: Shortcut): void;
/**
 * Textbus 事件对象
 */
export declare class Event<S, T = null> {
    target: S;
    data: T;
    get isPrevented(): boolean;
    private _isPrevented;
    constructor(target: S, data: T);
    preventDefault(): void;
}
export declare class ContextMenuEvent<T> extends Event<T> {
    private getMenus;
    constructor(target: T, getMenus: (menus: ContextMenuConfig[]) => void);
    get stopped(): boolean;
    private isStopped;
    stopPropagation(): void;
    useMenus(menus: ContextMenuConfig[]): void;
}
export declare class GetRangesEvent<T> extends Event<T> {
    private getRanges;
    constructor(target: T, getRanges: (ranges: SlotRange[]) => void);
    useRanges(ranges: SlotRange[]): void;
}
/**
 * 触发组件事件的方法
 * @param target 目标组件
 * @param eventType 事件名
 * @param event 事件对象
 */
export declare function invokeListener(target: ComponentInstance, eventType: 'onSelectionFromFront', event: Event<ComponentInstance>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onSelectionFromEnd', event: Event<ComponentInstance>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onContentInsert', event: Event<Slot, InsertEventData>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onContentInserted', event: Event<Slot, InsertEventData>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onContentDelete', event: Event<Slot, DeleteEventData>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onContentDeleted', event: Event<Slot>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onSlotRemove', event: Event<ComponentInstance, SlotRemoveEventData>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onSlotRemoved', event: Event<ComponentInstance>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onBreak', event: Event<Slot, BreakEventData>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onContextMenu', event: ContextMenuEvent<ComponentInstance>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onPaste', event: Event<Slot, PasteEventData>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onDirtyViewClean', event: Event<ComponentInstance, NativeNode>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onGetRanges', event: GetRangesEvent<ComponentInstance>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onCompositionStart', event: Event<Slot, CompositionStartEventData>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onCompositionUpdate', event: Event<Slot, CompositionUpdateEventData>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onCompositionEnd', event: Event<Slot>): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onSelected'): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onUnselect'): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onFocus'): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onBlur'): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onFocusIn'): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onFocusOut'): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onDestroy'): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onViewChecked'): void;
export declare function invokeListener(target: ComponentInstance, eventType: 'onParentSlotUpdated'): void;
/**
 * 根据组件触发上下文菜单
 * @param component
 */
export declare function triggerContextMenu(component: ComponentInstance): ContextMenuConfig[][];
/**
 * 当已选中组件未选中或选区不只选中已选中组件时触发
 */
export declare const onUnselect: (listener: () => void) => void;
/**
 * 当选区刚好选中一个组件
 */
export declare const onSelected: (listener: () => void) => void;
/**
 * 当光标从前面进入组件
 */
export declare const onSelectionFromFront: (listener: (event: Event<ComponentInstance>) => void) => void;
/**
 * 当光标从后面进入组件
 */
export declare const onSelectionFromEnd: (listener: (event: Event<ComponentInstance>) => void) => void;
/**
 * 组件获取焦点事件的勾子
 */
export declare const onFocus: (listener: () => void) => void;
/**
 * 组件失去焦点事件的勾子
 */
export declare const onBlur: (listener: () => void) => void;
/**
 * 组件或子组件获取焦点事件的勾子
 */
export declare const onFocusIn: (listener: () => void) => void;
/**
 * 组件或子组件失去焦点事件的勾子
 */
export declare const onFocusOut: (listener: () => void) => void;
/**
 * 组件内粘贴事件勾子
 */
export declare const onPaste: (listener: (event: Event<Slot, PasteEventData>) => void) => void;
/**
 * 组件右键菜单事件勾子
 */
export declare const onContextMenu: (listener: (event: ContextMenuEvent<ComponentInstance>) => void) => void;
/**
 * 组件视图更新后的勾子
 */
export declare const onViewChecked: (listener: () => void) => void;
/**
 * 组件第一次渲染后的勾子
 */
export declare const onViewInit: (listener: () => void) => void;
/**
 * 组件子插槽删除时的勾子
 */
export declare const onSlotRemove: (listener: (event: Event<ComponentInstance, SlotRemoveEventData>) => void) => void;
/**
 * 组件子插槽删除完成时的勾子
 */
export declare const onSlotRemoved: (listener: (event: Event<ComponentInstance>) => void) => void;
/**
 * 组件子插槽内容删除时的勾子
 */
export declare const onContentDelete: (listener: (event: Event<Slot, DeleteEventData>) => void) => void;
/**
 * 组件子插槽内容删除完成时的勾子
 */
export declare const onContentDeleted: (listener: (event: Event<Slot>) => void) => void;
/**
 * 组件子插槽换行时的勾子
 */
export declare const onBreak: (listener: (event: Event<Slot, BreakEventData>) => void) => void;
/**
 * 组件子插槽插入内容时的勾子
 */
export declare const onContentInsert: (listener: (event: Event<Slot, InsertEventData>) => void) => void;
/**
 * 组件子插槽插入内容后时的勾子
 */
export declare const onContentInserted: (listener: (event: Event<Slot, InsertEventData>) => void) => void;
/**
 * 组件销毁时的勾子
 */
export declare const onDestroy: (listener: () => void) => void;
/**
 * 当组件为选区公共父组件时的勾子
 */
export declare const onGetRanges: (listener: (event: GetRangesEvent<ComponentInstance>) => void) => void;
/**
 * 当 diff 视图时，检测到有脏节点时调用的勾子
 */
export declare const onDirtyViewClean: (listener: (event: Event<ComponentInstance, NativeNode>) => void) => void;
/**
 * 当插槽组合输入前触发
 */
export declare const onCompositionStart: (listener: (event: Event<Slot, CompositionStartEventData>) => void) => void;
/**
 * 当插槽组合输入时触发
 */
export declare const onCompositionUpdate: (listener: (event: Event<Slot, CompositionUpdateEventData>) => void) => void;
/**
 * 当插槽组合输入结束触发
 */
export declare const onCompositionEnd: (listener: (event: Event<Slot>) => void) => void;
/**
 * 当组件的父插槽数据发生更新后触发
 */
export declare const onParentSlotUpdated: (listener: () => void) => void;
