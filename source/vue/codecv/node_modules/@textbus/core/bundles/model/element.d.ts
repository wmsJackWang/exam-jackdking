declare const parentNode: unique symbol;
/**
 * Textbus 虚拟 DOM 文本节点
 */
export declare class VTextNode {
    textContent: string;
    get parentNode(): VElement | null;
    [parentNode]: VElement | null;
    constructor(textContent?: string);
}
export type VElementJSXChildNode = VElement | VFragment | VTextNode | string | number | boolean | null | undefined;
export interface VElementOptions {
    [key: string]: any;
}
export interface VElementProps extends VElementOptions {
    children?: Array<VElementJSXChildNode>;
}
export interface VElementRenderFn {
    (props: VElementProps | null): VElement;
}
export interface VElementListeners {
    [listenKey: string]: <T extends Event>(ev: T) => any;
}
export declare function Fragment(fragment: {
    children: VElementJSXChildNode[];
}): VFragment;
export declare function jsx(tagName: string | VElementRenderFn, props?: VElementProps): VElement;
export declare function jsxs(tagName: string | VElementRenderFn, props?: VElementProps): VElement;
export declare class VFragment {
    children: VElementJSXChildNode[];
    constructor(children: VElementJSXChildNode[]);
}
/**
 * Textbus 虚拟 DOM 元素节点
 */
export declare class VElement {
    tagName: string;
    static createElement(tagName: string | VElementRenderFn, attrs?: VElementOptions | null, ...childNodes: VElementJSXChildNode[] | VElementJSXChildNode[][]): VElement;
    get parentNode(): VElement | null;
    get children(): (VTextNode | VElement)[];
    [parentNode]: VElement | null;
    readonly attrs: Map<string, any>;
    readonly styles: Map<string, string | number>;
    readonly classes: Set<string>;
    readonly listeners: VElementListeners;
    private _children;
    constructor(tagName: string, attrs?: VElementOptions | null, children?: Array<VElement | VTextNode>);
    /**
     * 在最后位置添加一个子节点。
     * @param newNodes
     */
    appendChild(...newNodes: Array<VElement | VTextNode>): void;
    removeChild(node: VTextNode | VElement): void;
    replaceChild(newNode: VElement | VTextNode, oldNode: VElement | VTextNode): void;
}
export {};
