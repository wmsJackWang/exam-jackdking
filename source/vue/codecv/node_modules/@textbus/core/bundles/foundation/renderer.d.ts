import { Observable } from '@tanbo/stream';
import { ComponentInstance, NativeNode, Slot, VElement, VTextNode } from '../model/_api';
import { NativeRenderer, RootComponentRef } from './_injection-tokens';
import { Controller } from './controller';
import { VNodeLocation } from './pure-renderer';
/**
 * Textbus 编辑渲染器，负责组件的渲染，生成 DOM，并根据数据变化，更新 DOM
 */
export declare class Renderer {
    private controller;
    private rootComponentRef;
    /**
     * 视图更新前触发
     */
    onViewUpdateBefore: Observable<void>;
    /**
     * 视图更新后触发
     */
    onViewUpdated: Observable<void>;
    /**
     * 原生渲染器
     */
    nativeRenderer: NativeRenderer;
    private slotRootVNodeCaches;
    private vNodeLocation;
    private renderedVNode;
    private slotVNodesCaches;
    private slotRenderFactory;
    private componentVNode;
    private nativeNodeCaches;
    private viewUpdatedEvent;
    private viewUpdateBeforeEvent;
    private oldVDom;
    private slotIdAttrKey;
    private readonlyStateChanged;
    private subscription;
    private renderedComponents;
    private firstRending;
    constructor(controller: Controller, rootComponentRef: RootComponentRef);
    /**
     * 以编辑模式渲染当前文档
     */
    render(): void;
    /**
     * 获取组件对应的虚拟 DOM 节点
     * @param component
     */
    getVNodeByComponent(component: ComponentInstance): VElement;
    /**
     * 根据虚拟 DOM 节点，获取当前所属的组件
     * @param vNode
     */
    getComponentByVNode(vNode: VElement): ComponentInstance | null;
    /**
     * 根据原生节点，获取当前所属的组件
     * @param nativeNode
     */
    getComponentByNativeNode(nativeNode: NativeNode): ComponentInstance | null;
    /**
     * 获取插槽 对应的虚拟 DOM 节点
     * @param slot
     */
    getVNodeBySlot(slot: Slot): VElement | undefined;
    /**
     * 通过虚拟 DOM 节点获取对应的原生节点
     * @param vNode
     */
    getNativeNodeByVNode(vNode: VElement | VTextNode): NativeNode;
    /**
     * 获取原生节点对应的虚拟 DOM 节点
     * @param nativeNode
     */
    getVNodeByNativeNode(nativeNode: NativeNode): VTextNode | VElement;
    /**
     * 获取虚拟 DOM 节点的原始数据在文档中的位置
     * @param node
     */
    getLocationByVNode(node: VElement | VTextNode | Slot): VNodeLocation | undefined;
    /**
     * 获取原生节点的原始数据在文档中的位置
     * @param node
     */
    getLocationByNativeNode(node: NativeNode): VNodeLocation | null;
    /**
     * 获取插槽内容节点集合
     * @param slot
     */
    getVNodesBySlot(slot: Slot): (VTextNode | VElement)[];
    /**
     * 销毁渲染器
     */
    destroy(): void;
    private sortAndCleanNativeNode;
    private diffAndUpdate;
    private diffChildrenAndUpdate;
    private diffIdenticalChildrenToEnd;
    private diffIdenticalChildrenToBegin;
    private diffChildrenToEnd;
    private diffChildrenToBegin;
    private diffNodeAndUpdate;
    private patch;
    private extractVNodesBySlot;
    private componentRender;
    private slotRender;
    private createElement;
    private createTextNode;
}
