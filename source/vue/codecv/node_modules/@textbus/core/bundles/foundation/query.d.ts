import { Selection } from './selection';
import { ComponentInstance, ComponentExtends, Formatter, FormatValue, Component, Attribute } from '../model/_api';
/**
 * Textbus 状态查询状态枚举
 */
export declare enum QueryStateType {
    /** 正常 */
    Normal = "Normal",
    /** 当前不可用 */
    Disabled = "Disabled",
    /** 当前状态为生效 */
    Enabled = "Enabled"
}
/**
 * Textbus 状态查询结果，当状态为 Normal，`value` 为 null
 */
export interface QueryState<V, S = QueryStateType, K = S extends QueryStateType.Enabled ? V : null> {
    state: S;
    value: K;
}
/**
 * Textbus 状态查询类，用于查询组件或格式在当前选区的状态
 */
export declare class Query {
    private selection;
    constructor(selection: Selection);
    /**
     * 查询格式在当前选区的状态
     * @param formatter 要查询的格式
     */
    queryFormat<T extends FormatValue>(formatter: Formatter<T>): QueryState<T>;
    /**
     * 查询属性在当前选区的状态
     * @param attribute
     */
    queryAttribute<T extends FormatValue>(attribute: Attribute<T>): QueryState<T>;
    /**
     * 查询组件在选区内的状态
     * @param component 要查询的组件
     * @param filter 查询结构过滤函数，过滤不需要的数据
     */
    queryComponent<Extends extends ComponentExtends, T, U>(component: Component<ComponentInstance<Extends, T, U>>, filter?: (instance: ComponentInstance<Extends, T, U>) => boolean): QueryState<ComponentInstance<Extends, T, U>>;
    /**
     * 查询当前选区是否包含在组件内
     * @param component 要查询的组件
     */
    queryWrappedComponent<Extends extends ComponentExtends, T, U>(component: Component<ComponentInstance<Extends, T, U>>): QueryState<ComponentInstance<Extends, T, U>>;
    private getStatesByRange;
    private mergeState;
}
