import { InjectionToken } from '@tanbo/di';
import { ComponentInstance, Formatter, Component, NativeNode, Attribute } from '../model/_api';
/**
 * 原生渲染器抽象类，由具体平台提供具体实现
 */
export declare abstract class NativeRenderer {
    abstract createElement(name: string): NativeNode;
    abstract createTextNode(textContent: string): NativeNode;
    abstract appendChild(parent: NativeNode, newChild: NativeNode): void;
    abstract addClass(target: NativeNode, name: string): void;
    abstract removeClass(target: NativeNode, name: string): void;
    abstract setAttribute(target: NativeNode, key: string, value: string): void;
    abstract removeAttribute(target: NativeNode, key: string): void;
    abstract setStyle(target: NativeNode, key: string, value: any): void;
    abstract syncTextContent(target: NativeNode, content: string): void;
    abstract removeStyle(target: NativeNode, key: string): void;
    abstract replace(newChild: NativeNode, oldChild: NativeNode): void;
    abstract remove(node: NativeNode): void;
    abstract insertBefore(newNode: NativeNode, ref: NativeNode): void;
    abstract getChildByIndex(parent: NativeNode, index: number): NativeNode | null;
    abstract listen<T = any>(node: NativeNode, type: string, callback: (ev: T) => any): void;
    abstract unListen(node: NativeNode, type: string, callback: (ev: any) => any): void;
    abstract copy(): void;
}
/**
 * 根节点及原生根元素节点引用类
 */
export declare abstract class RootComponentRef {
    abstract component: ComponentInstance;
    abstract host: NativeNode;
}
/**
 * @internal Textbus 组件列表注入 token
 */
export declare const COMPONENT_LIST: InjectionToken<Component<ComponentInstance<import("../model/component").ComponentExtends, any, unknown>, import("../model/component").ComponentInitData<unknown, unknown>>[]>;
/**
 * @internal Textbus 格式列表注入 token
 */
export declare const FORMATTER_LIST: InjectionToken<Formatter<any>[]>;
/**
 * @internal Textbus 插槽属性注入列表
 */
export declare const ATTRIBUTE_LIST: InjectionToken<Attribute<any>[]>;
/**
 * 开启 Zen Coding 支持
 */
export declare const ZEN_CODING_DETECT: InjectionToken<boolean>;
/**
 * 最大历史记录栈大小
 */
export declare const HISTORY_STACK_SIZE: InjectionToken<number>;
/**
 * 是否只读
 */
export declare const READONLY: InjectionToken<boolean>;
