import { Injector } from '@tanbo/di';
import { Attribute, Component, ComponentInitData, ComponentInstance, ComponentLiteral, Formatter, Slot, SlotLiteral } from '../model/_api';
/**
 * 注册表
 * 用于缓存一个 Textbus 实例内可用的 Component、Formatter、Attribute。
 * Registry 也可以根据数据创建组件或插槽的实例
 */
export declare class Registry {
    contextInjector: Injector;
    private components;
    private attributes;
    private formatters;
    private componentMap;
    private formatMap;
    private attributeMap;
    constructor(contextInjector: Injector, components: Component[], attributes: Attribute<any>[], formatters: Formatter<any>[]);
    /**
     * 根据组件名获取组件
     * @param name 组件名
     */
    getComponent(name: string): Component<ComponentInstance<import("../model/component").ComponentExtends, any, unknown>, ComponentInitData<unknown, unknown>> | null;
    /**
     * 根据格式名获取格式
     * @param name 格式名
     */
    getFormatter(name: string): Formatter<any> | null;
    /**
     * 根据名字获取 Attribute 实例
     * @param name
     */
    getAttribute(name: string): Attribute<any> | null;
    /**
     * 根据组件名和数据创建组件
     * @param name
     * @param data
     */
    createComponentByData(name: string, data: ComponentInitData): ComponentInstance<import("../model/component").ComponentExtends, any, unknown> | null;
    /**
     * 根据插槽数据生成插槽实例
     * @param slotLiteral
     * @param customComponentCreator
     */
    createSlot(slotLiteral: SlotLiteral<any, any>, customComponentCreator?: (componentLiteral: ComponentLiteral, index: number) => ComponentInstance): Slot;
    /**
     * 根据组件数据生成组件实例
     * @param componentLiteral
     * @param customSlotCreator
     */
    createComponent(componentLiteral: ComponentLiteral, customSlotCreator?: (slotLiteral: SlotLiteral<any, any>, index: number) => Slot): ComponentInstance | null;
    /**
     * 指定组件创建实例
     * @param componentLiteral
     * @param factory
     * @param customSlotCreator
     */
    createComponentByFactory(componentLiteral: ComponentLiteral, factory: Component, customSlotCreator?: (slotLiteral: SlotLiteral<any, any>, index: number) => Slot): ComponentInstance<import("../model/component").ComponentExtends, any, unknown>;
    /**
     * 将插槽数据填充到指定的插槽
     * @param source
     * @param target
     */
    fillSlot<T extends SlotLiteral<any, any>, U extends Slot>(source: T, target: U): U;
    private loadSlot;
}
