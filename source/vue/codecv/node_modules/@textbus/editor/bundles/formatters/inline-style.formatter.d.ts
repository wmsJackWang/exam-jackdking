import { FormatHostBindingRender, VElement, VTextNode, FormatValue, Formatter } from '@textbus/core';
import { Matcher, MatchRule } from './matcher';
import { FormatLoader } from '@textbus/platform-browser';
export declare class InlineStyleFormatLoader<T extends FormatValue> extends Matcher<T, Formatter<any>> implements FormatLoader<T> {
    styleName: string;
    constructor(styleName: string, formatter: InlineStyleFormatter, rule: MatchRule);
    read(node: HTMLElement): {
        formatter: Formatter<any>;
        value: T;
    };
}
export declare class InlineStyleFormatter implements Formatter<string> {
    name: string;
    styleName: string;
    priority: number;
    columned: boolean;
    constructor(name: string, styleName: string);
    render(children: Array<VElement | VTextNode>, formatValue: string): FormatHostBindingRender;
}
export declare const letterSpacingFormatter: InlineStyleFormatter;
export declare const fontFamilyFormatter: InlineStyleFormatter;
export declare const lineHeightFormatter: InlineStyleFormatter;
export declare const letterSpacingFormatLoader: InlineStyleFormatLoader<FormatValue>;
export declare const fontFamilyFormatLoader: InlineStyleFormatLoader<FormatValue>;
export declare const lineHeightFormatLoader: InlineStyleFormatLoader<FormatValue>;
