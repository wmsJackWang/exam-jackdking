import "./chunk-HUBM7RA2.js";

// node_modules/picture-verification-code/lib/main.esm.js
var t = class {
  constructor(...t2) {
    const [h2 = 100, s2 = 40] = t2;
    this.width = h2, this.height = s2, this.size = 16, this.code = [], this.canvas = document.createElement("canvas"), this.ctx = this.canvas.getContext("2d"), this.canvas.width = this.width, this.canvas.height = this.height, this.ctx.fillStyle = i(180, 240), this.ctx.fillRect(0, 0, this.width, this.height);
  }
  setBgColor(t2) {
    return this.bgColor = t2, this;
  }
  setBgImg(t2) {
    return this.bgImage = t2, this;
  }
  setWidth(t2) {
    return this.width = t2, this;
  }
  setHeight(t2) {
    return this.height = t2, this;
  }
  render(t2) {
    const { canvas: s2, ctx: e } = this;
    e.clearRect(0, 0, s2.width, s2.height), this.code = t2 ? t2.split("") : [], this.size = Math.min(16, this.height - 14), this.width = Math.max(this.width, (this.size + 5) * this.code.length), this.canvas.width = this.width, this.canvas.height = this.height, this.ctx.fillStyle = this.bgColor || i(180, 240), this.ctx.fillRect(0, 0, this.width, this.height), this.bgImage && this.ctx.drawImage(this.bgImage, 0, 0, this.width, this.height), this.canvas.style.cursor = "pointer", this.canvas.innerHTML = "<span style='color: red'>\u4F60\u7684\u6D4F\u89C8\u5668\u4E0D\u652F\u6301canvas</span>", e.textBaseline = "middle";
    const a = this.width / (this.code.length + 1), n = this.height / 2;
    return this.code.forEach((t3, s3) => {
      const r = a * (s3 + 0.5);
      e.font = h(this.height / 2, this.height) + "px SimHei", e.fillStyle = i(50, 160), e.shadowOffsetX = h(-3, 3), e.shadowOffsetY = h(-3, 3), e.shadowBlur = h(-3, 3), e.shadowColor = "rgba(0, 0, 0, 0.3)", e.translate(r, n), e.fillText(t3, 0, 0), e.translate(-r, -n);
    }), this.canvas.toDataURL("image/jpeg", 1);
  }
};
function h(t2, h2) {
  return Math.floor(Math.random() * (h2 - t2) + t2);
}
function i(t2, i2) {
  return "rgb(" + h(t2, i2) + ", " + h(t2, i2) + ", " + h(t2, i2) + ")";
}
function s(t2) {
  t2 = t2 || 4;
  const i2 = [], s2 = [];
  let e = [];
  for (let t3 = 65; t3 < 91; t3++)
    i2.push(String.fromCharCode(t3));
  for (let t3 = 97; t3 < 123; t3++)
    s2.push(String.fromCharCode(t3));
  e = new Array(10).fill("").map((t3, h2) => `${h2}`);
  const a = [...e, ...i2, ...s2];
  return new Array(t2).fill("").map(() => a[h(0, a.length - 1)]).join("");
}
export {
  s as createCode,
  t as default
};
//# sourceMappingURL=picture-verification-code.js.map
